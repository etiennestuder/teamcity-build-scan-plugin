import org.gradle.util.GradleVersion

if (GradleVersion.current() < GradleVersion.version('4.1')) {
    logger.warn("TeamCity Build Scan plugin requires at least Gradle 4.1. Build uses Gradle ${GradleVersion.current()}.")
    return
}

initscript {
    def gePluginVersion = System.getProperty('teamCityBuildScanPlugin.gradle.enterprise.plugin.version')
    def ccudPluginVersion = System.getProperty('teamCityBuildScanPlugin.ccud.plugin.version')
    def atLeastGradle5 = GradleVersion.current() >= GradleVersion.version('5.0')
    def isTopLevelBuild = !gradle.parent
    def addGePluginToClasspath = gePluginVersion && isTopLevelBuild
    def addCcudPluginToClasspath = ccudPluginVersion && atLeastGradle5 && isTopLevelBuild

    if (addGePluginToClasspath || addCcudPluginToClasspath) {
        repositories {
            maven { url 'https://plugins.gradle.org/m2' }
        }
    }

    dependencies {
        if (addGePluginToClasspath) {
            classpath atLeastGradle5 ?
                    "com.gradle:gradle-enterprise-gradle-plugin:$gePluginVersion" :
                    "com.gradle:build-scan-plugin:$gePluginVersion"
        }

        if (addCcudPluginToClasspath) {
            classpath "com.gradle:common-custom-user-data-gradle-plugin:$ccudPluginVersion"
        }
    }
}

logger.quiet(generateBuildScanLifeCycleMessage('BUILD_STARTED'))

def BUILD_SCAN_PLUGIN_ID = 'com.gradle.build-scan'
def BUILD_SCAN_PLUGIN_CLASS = 'com.gradle.scan.plugin.BuildScanPlugin'

def CCUD_PLUGIN_ID = 'com.gradle.common-custom-user-data-gradle-plugin'
def CCUD_PLUGIN_CLASS = 'com.gradle.CommonCustomUserDataGradlePlugin'

def GRADLE_ENTERPRISE_PLUGIN_ID = 'com.gradle.enterprise'
def GRADLE_ENTERPRISE_PLUGIN_CLASS = 'com.gradle.enterprise.gradleplugin.GradleEnterprisePlugin'
def GRADLE_ENTERPRISE_EXTENSION_CLASS = 'com.gradle.enterprise.gradleplugin.GradleEnterpriseExtension'

def atLeastGradle5 = GradleVersion.current() >= GradleVersion.version('5.0')
def isTopLevelBuild = !gradle.parent
def geUrl = System.getProperty('teamCityBuildScanPlugin.gradle.enterprise.url')
def autoApplyGePlugin = System.getProperty('teamCityBuildScanPlugin.gradle.enterprise.plugin.version') && isTopLevelBuild
def autoApplyCcudPlugin = System.getProperty('teamCityBuildScanPlugin.ccud.plugin.version') && isTopLevelBuild && atLeastGradle5

def buildScanPublishedAction = { def buildScan ->
    if (buildScan.metaClass.respondsTo(buildScan, 'buildScanPublished', Action)) {
        buildScan.buildScanPublished { scan ->
            logger.quiet(generateBuildScanLifeCycleMessage("BUILD_SCAN_URL:${scan.buildScanUri.toString()}"))
        }
    }
}

if (GradleVersion.current() < GradleVersion.version('6.0')) {
    // Gradle 4.1+ and 5.+
    rootProject {
        if (autoApplyGePlugin && !pluginManager.hasPlugin(BUILD_SCAN_PLUGIN_ID)) {
            pluginManager.apply(initscript.classLoader.loadClass(BUILD_SCAN_PLUGIN_CLASS))

            pluginManager.withPlugin(BUILD_SCAN_PLUGIN_ID) {
                buildScan {
                    server = geUrl
                    publishAlways()
                }
            }
        }

        if (autoApplyCcudPlugin && !pluginManager.hasPlugin(CCUD_PLUGIN_ID)) {
            pluginManager.apply(initscript.classLoader.loadClass(CCUD_PLUGIN_CLASS))
        }

        pluginManager.withPlugin(BUILD_SCAN_PLUGIN_ID) {
            buildScanPublishedAction(buildScan)
        }
    }
} else {
    // Gradle 6.+
    gradle.settingsEvaluated { settings ->
        if (autoApplyGePlugin && !settings.pluginManager.hasPlugin(GRADLE_ENTERPRISE_PLUGIN_ID)) {
            settings.pluginManager.apply(initscript.classLoader.loadClass(GRADLE_ENTERPRISE_PLUGIN_CLASS))

            extensionsWithPublicType(settings, GRADLE_ENTERPRISE_EXTENSION_CLASS).collect{ settings[it.name] }.each { ext ->
                ext.server = ext.server ?: geUrl
                ext.buildScan {
                    publishAlways()
                }
            }
        }

        if (autoApplyCcudPlugin && !settings.pluginManager.hasPlugin(CCUD_PLUGIN_ID)) {
            settings.pluginManager.apply(initscript.classLoader.loadClass(CCUD_PLUGIN_CLASS))
        }

        extensionsWithPublicType(settings, GRADLE_ENTERPRISE_EXTENSION_CLASS).each {
            buildScanPublishedAction(settings[it.name].buildScan)
        }
    }
}

static def extensionsWithPublicType(def container, String publicType) {
    container.extensions.extensionsSchema.elements.findAll { it.publicType.concreteClass.name == publicType }
}

static String generateBuildScanLifeCycleMessage(def attribute) {
    return "##teamcity[nu.studer.teamcity.buildscan.buildScanLifeCycle '${escape(attribute as String)}']" as String
}

static String escape(String value) {
    return value?.toCharArray()?.collect{ch -> escapeChar(ch) }?.join()
}

static String escapeChar(char ch) {
    String escapeCharacter = "|"
    switch (ch) {
        case '\n': return escapeCharacter + "n";
        case '\r': return escapeCharacter + "r";
        case '|': return escapeCharacter + "|";
        case '\'': return escapeCharacter + "\'";
        case '[': return escapeCharacter + "[";
        case ']': return escapeCharacter + "]";
        default: return ch < 128 ? ch as String : escapeCharacter + String.format("0x%04x", (int)ch);
    }
}