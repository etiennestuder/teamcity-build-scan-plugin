import jetbrains.buildServer.messages.serviceMessages.ServiceMessage
import org.gradle.util.GradleVersion

if (GradleVersion.current() < GradleVersion.version('4.1')) {
    logger.warn("TeamCity Build Scan plugin requires at least Gradle 4.1. Build uses Gradle ${GradleVersion.current()}.")
    return
}

initscript {
    dependencies {
        def teamCityInitLib = System.getenv('TEAMCITY_BUILD_INIT_PATH')
        def classPathFiles = teamCityInitLib.split(File.pathSeparator)
        classpath files(classPathFiles)
    }
}

def serviceMessageName = 'nu.studer.teamcity.buildscan.buildScanLifeCycle'
logger.quiet(ServiceMessage.asString(serviceMessageName, 'BUILD_STARTED').toString())

def BUILD_SCAN_PLUGIN_ID = 'com.gradle.build-scan'
def GRADLE_ENTERPRISE_EXTENSION_CLASS = 'com.gradle.enterprise.gradleplugin.GradleEnterpriseExtension'

def buildScanPublishedAction = { def buildScan ->
    if (buildScan.metaClass.respondsTo(buildScan, 'buildScanPublished', Action)) {
        buildScan.buildScanPublished { scan ->
            logger.quiet(ServiceMessage.asString(serviceMessageName, "BUILD_SCAN_URL:${scan.buildScanUri.toString()}"))
        }
    }
}

if (GradleVersion.current() < GradleVersion.version('6.0')) {
    // Gradle 4.1+ and 5.+
    rootProject {
        pluginManager.withPlugin(BUILD_SCAN_PLUGIN_ID) {
            buildScanPublishedAction(buildScan)
        }
    }
} else {
    // Gradle 6.+
    def geUrl = System.getProperty("teamCityBuildScanPlugin.gradle.enterprise.url")
    def shouldApplyGe = geUrl && !gradle.getParent()

    if (shouldApplyGe) {
        gradle.beforeSettings { settings ->
            addGeToClasspath(settings.buildscript)
        }
    }

    gradle.settingsEvaluated { settings ->
        if (shouldApplyGe && !settings.pluginManager.hasPlugin("com.gradle.enterprise")) {
            settings.pluginManager.apply("com.gradle.enterprise")
        }

        extensionsWithPublicType(settings, GRADLE_ENTERPRISE_EXTENSION_CLASS).each {
            buildScanPublishedAction(it.buildScan)
            configureGeExtension(it, geUrl, shouldApplyGe)
        }
    }
}

static def addGeToClasspath(def target) {
    target.repositories { gradlePluginPortal() }
    target.dependencies.classpath("com.gradle:gradle-enterprise-gradle-plugin:3.10")
}

static def extensionsWithPublicType(def container, String publicType) {
    container.extensions.extensionsSchema.elements
            .findAll { it.publicType.concreteClass.name == publicType }
            .collect { container[it.name] }
}

static def configureGeExtension(def gradleEnterprise, def geUrl, def geWasAutoApplied) {
    gradleEnterprise.server = geUrl ?: gradleEnterprise.server

    if (geWasAutoApplied) {
        gradleEnterprise.buildScan {
            publishAlways()
        }
    }
}
