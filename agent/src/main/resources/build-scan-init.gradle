import org.gradle.util.GradleVersion

// finish early if the build is not run with the minimum supported Gradle version
if (GradleVersion.current() < GradleVersion.version('4.1')) {
    logger.warn("TeamCity Build Scan plugin requires at least Gradle 4.1. Build uses Gradle ${GradleVersion.current()}.")
    return
}

// conditionally apply the GE / Build Scan plugin to the classpath so it can be applied to the build further down in this script
initscript {
    def isTopLevelBuild = !gradle.parent
    def atLeastGradle5 = GradleVersion.current() >= GradleVersion.version('5.0')
    def gePluginVersion = System.getProperty('teamCityBuildScanPlugin.gradle-enterprise.plugin.version')
    def ccudPluginVersion = System.getProperty('teamCityBuildScanPlugin.ccud.plugin.version')

    if (!isTopLevelBuild) {
        return
    }

    if (gePluginVersion || ccudPluginVersion && atLeastGradle5) {
        repositories {
            maven { url 'https://plugins.gradle.org/m2' }
        }
    }

    dependencies {
        if (gePluginVersion) {
            classpath atLeastGradle5 ?
                "com.gradle:gradle-enterprise-gradle-plugin:$gePluginVersion" :
                "com.gradle:build-scan-plugin:1.16"
        }

        if (ccudPluginVersion && atLeastGradle5) {
            classpath "com.gradle:common-custom-user-data-gradle-plugin:$ccudPluginVersion"
        }
    }
}

// send a message to the server that the build has started
logger.quiet(generateBuildScanLifeCycleMessage('BUILD_STARTED'))

def BUILD_SCAN_PLUGIN_ID = 'com.gradle.build-scan'
def BUILD_SCAN_PLUGIN_CLASS = 'com.gradle.scan.plugin.BuildScanPlugin'

def GRADLE_ENTERPRISE_PLUGIN_ID = 'com.gradle.enterprise'
def GRADLE_ENTERPRISE_PLUGIN_CLASS = 'com.gradle.enterprise.gradleplugin.GradleEnterprisePlugin'
def GRADLE_ENTERPRISE_EXTENSION_CLASS = 'com.gradle.enterprise.gradleplugin.GradleEnterpriseExtension'

def CCUD_PLUGIN_ID = 'com.gradle.common-custom-user-data-gradle-plugin'
def CCUD_PLUGIN_CLASS = 'com.gradle.CommonCustomUserDataGradlePlugin'

def isTopLevelBuild = !gradle.parent
def atLeastGradle5 = GradleVersion.current() >= GradleVersion.version('5.0')
def geUrl = System.getProperty('teamCityBuildScanPlugin.gradle-enterprise.url')
def gePluginVersion = System.getProperty('teamCityBuildScanPlugin.gradle-enterprise.plugin.version')
def ccudPluginVersion = System.getProperty('teamCityBuildScanPlugin.ccud.plugin.version')

// add a buildScanPublished listener that captures the build scan URL and sends it in a message to the server
def buildScanPublishedAction = { def buildScan ->
    if (buildScan.metaClass.respondsTo(buildScan, 'buildScanPublished', Action)) {
        buildScan.buildScanPublished { scan ->
            logger.quiet(generateBuildScanLifeCycleMessage("BUILD_SCAN_URL:${scan.buildScanUri.toString()}"))
        }
    }
}

if (GradleVersion.current() < GradleVersion.version('6.0')) {
    rootProject {
        pluginManager.withPlugin(BUILD_SCAN_PLUGIN_ID) {
            buildScanPublishedAction(buildScan)
        }
    }
} else {
    gradle.settingsEvaluated { settings ->
        extensionsWithPublicType(settings, GRADLE_ENTERPRISE_EXTENSION_CLASS).each {
            buildScanPublishedAction(settings[it.name].buildScan)
        }
    }
}

// conditionally apply the GE / Build Scan plugin to the classpath
if (!isTopLevelBuild) {
    return
}

if (GradleVersion.current() < GradleVersion.version('6.0')) {
    rootProject {
        if (gePluginVersion) {
            if (!pluginManager.hasPlugin(BUILD_SCAN_PLUGIN_ID)) {
                pluginManager.apply(initscript.classLoader.loadClass(BUILD_SCAN_PLUGIN_CLASS))

                pluginManager.withPlugin(BUILD_SCAN_PLUGIN_ID) {
                    buildScan {
                        server = geUrl
                        publishAlways()
                    }
                }
            }
        }

        if (ccudPluginVersion && atLeastGradle5) {
            if (!pluginManager.hasPlugin(CCUD_PLUGIN_ID)) {
                pluginManager.apply(initscript.classLoader.loadClass(CCUD_PLUGIN_CLASS))
            }
        }
    }
} else {
    gradle.settingsEvaluated { settings ->
        if (gePluginVersion) {
            if (!settings.pluginManager.hasPlugin(GRADLE_ENTERPRISE_PLUGIN_ID)) {
                settings.pluginManager.apply(initscript.classLoader.loadClass(GRADLE_ENTERPRISE_PLUGIN_CLASS))

                extensionsWithPublicType(settings, GRADLE_ENTERPRISE_EXTENSION_CLASS).collect { settings[it.name] }.each { ext ->
                    ext.server = ext.server ?: geUrl
                    ext.buildScan {
                        publishAlways()
                    }
                }
            }
        }

        if (ccudPluginVersion && atLeastGradle5) {
            if (!settings.pluginManager.hasPlugin(CCUD_PLUGIN_ID)) {
                settings.pluginManager.apply(initscript.classLoader.loadClass(CCUD_PLUGIN_CLASS))
            }
        }
    }
}

static def extensionsWithPublicType(def container, String publicType) {
    container.extensions.extensionsSchema.elements.findAll { it.publicType.concreteClass.name == publicType }
}

static String generateBuildScanLifeCycleMessage(def attribute) {
    return "##teamcity[nu.studer.teamcity.buildscan.buildScanLifeCycle '${escape(attribute as String)}']" as String
}

static String escape(String value) {
    return value?.toCharArray()?.collect { ch -> escapeChar(ch) }?.join()
}

static String escapeChar(char ch) {
    String escapeCharacter = "|"
    switch (ch) {
        case '\n': return escapeCharacter + "n"
        case '\r': return escapeCharacter + "r"
        case '|': return escapeCharacter + "|"
        case '\'': return escapeCharacter + "\'"
        case '[': return escapeCharacter + "["
        case ']': return escapeCharacter + "]"
        default: return ch < 128 ? ch as String : escapeCharacter + String.format("0x%04x", (int) ch)
    }
}
