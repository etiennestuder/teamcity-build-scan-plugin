import org.gradle.nativeplatform.platform.internal.DefaultNativePlatform

plugins {
    id 'java-base'
}

ext {
    CI = System.getenv().containsKey('CI') || project.properties.containsKey('CI')
}

tasks.register('buildExtension', Exec).configure {
    def toolchain = project.getExtensions().getByType(JavaToolchainService.class)
    def launcherFor = toolchain.launcherFor { it.languageVersion.set(JavaLanguageVersion.of(8)) }
    def cmdLineArgProvider = new JavaLauncherCommandLineArgumentProvider(javaLauncher: launcherFor.get())

    inputs.file('pom.xml')
        .withPathSensitivity(PathSensitivity.RELATIVE)
        .withPropertyName('pomFile')
    inputs.dir('src/main')
        .withPathSensitivity(PathSensitivity.RELATIVE)
        .withPropertyName('sourceDir')
    outputs.file 'target/service-message-maven-extension-1.0.jar'
    outputs.cacheIf { true }
    argumentProviders.add cmdLineArgProvider

    def mvnw = DefaultNativePlatform.currentOperatingSystem.isWindows() ? './mvnw.cmd' : './mvnw'
    commandLine mvnw, 'clean', 'package'

    if (CI) {
        args '-B'
    }

    environment 'JAVA_HOME', cmdLineArgProvider.javaLauncher.metadata.installationPath.asFile.absolutePath
}

configurations {
    mvnExtension {
        canBeConsumed = true
        canBeResolved = false
    }
}

artifacts {
    mvnExtension(buildExtension.outputs.files.singleFile) {
        builtBy buildExtension
    }
}

final class JavaLauncherCommandLineArgumentProvider implements CommandLineArgumentProvider {

    @Nested
    JavaLauncher javaLauncher

    @Override
    Iterable<String> asArguments() {
        []
    }

}
